extern void object::Constants() {}

public class Const {
	static bool staticInit = true;

	static float FLYING_RANGE = 1500;
	static int[] ALL_BOTS;
	static int[] ALL_ALIENS;

	public void Const() {
		if (staticInit) {
			int[] a1 = {
				WheeledGrabber,
				TrackedGrabber,
				WingedGrabber,
				LeggedGrabber,
				WheeledShooter,
				TrackedShooter,
				WingedShooter,
				LeggedShooter,
				WheeledOrgaShooter,
				TrackedOrgaShooter,
				WingedOrgaShooter,
				LeggedOrgaShooter,
				WheeledSniffer,
				TrackedSniffer,
				WingedSniffer,
				LeggedSniffer,
				Thumper,
				PhazerShooter,
				Recycler,
				Shielder,
				Subber
			};
			ALL_BOTS = a1;

			int[] a2 = {
				AlienQueen,
				AlienAnt,
				AlienSpider,
				AlienWasp,
				AlienWorm
			};
			ALL_ALIENS = a2;

			staticInit = false;
		}
	}
}

string BotSubStr(int cat){
	 switch (cat%10) {
		case 0: return "Wheeled";
		case 1: return "Tracked";
		case 2: return "Winged";
		case 3: return "Legged";
	}
}

string ColorStr(int cat){
	 switch (cat%10) {
		case 0: return "Blue";
		case 1: return "Red";
		case 2: return "Green";
		case 3: return "Yellow";
		case 4: return "Violet";
	}
}

public string CatStr(int cat) {
	switch (cat) {
	case ResearchCenter: return "Research Center";
	case BotFactory: return "Bot Factory";
	}
	switch (cat/10) {
	case 11: return BotSubStr(cat) + " Grabber";
	case 12: return BotSubStr(cat) + " Sniffer ";
	case 13: return BotSubStr(cat) + " Shooter";
	case 14: return BotSubStr(cat) + " OrgaShooter";
	case 26: return ColorStr(cat) + " Flag";
	default: return "Cat " + cat;
	}
}

public string researchString(int research) {
	if (research == ResearchTracked) return "Tracked Bots";
	if (research == ResearchWinged) return "Winged Bots";

	message("Unrecognized research type!", DisplayError);
	return "Unrecognized research type!";
}

//returns the research needed for the bot's propultion
int botPropResearch(int botType){
	switch (botType % 10) {
	case 0: return 0;  //Wheeled needs no research
	case 1: return ResearchTracked;
	case 2: return ResearchWinged;
	case 3: return ResearchLegged;
	}
}

public int[] botResearch(int botType) {
	int[] research = { botPropResearch(botType) };

	switch (botType/10) {
	case 11: break;
	case 12: research[1] = ResearchSniffer; break;
	case 13: research[1] = ResearchShooter; break;
	case 14: research[1] = ResearchOrgaShooter; break;
	default:
		message("Invalid bot type: " + botType, DisplayError);
	}

	return research;
}

// When converting to a string, a raw constant (ResearchTracked, etc) will
// become the string text.  If we want it to be the number, we can pass if
// through this function first.
public int integer(int constant) {
	return constant;
}

public string printFlags(int flags) {
	string s = "|";
	for (int i = 12; i >= 0; i--) {
		if ((flags & (1<<i)) != 0) {
			s += "1|";
		} else {
			s += "0|";
		}
	}
	return s;
}

public string[] split(string in) {
	string[] res;
	int count = 0;

	while(true) {
		int loc = strfind(in, ",");
		if (loc == -1) break;
		res[count++] = strleft(in, loc);
		in = strmid(in, loc + 1);
	}
	res[count] = in;
	return res;
}
