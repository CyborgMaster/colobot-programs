extern void object::Constants() {}

public class Const {
	static bool staticInit = true;

	static float FLYING_RANGE = 1500;

	static int RESEARCH_TRACKED =   (1<<0);
	static int RESEARCH_WINGED =    (1<<1);
	static int RESEARCH_SHOOTER =   (1<<2);
	static int RESEARCH_TOWER =     (1<<3);
	static int RESEARCH_NUCLEAR =   (1<<4);
	static int RESEARCH_THUMPER =   (1<<5);
	static int RESEARCH_SHIELDER =  (1<<6);
	static int RESEARCH_PHAZER =    (1<<7);
	static int RESEARCH_LEGGED =    (1<<8);
	static int RESEARCH_ORGA =      (1<<9);
	static int RESEARCH_RECYCLER =  (1<<10);
	static int RESEARCH_SUBBER =    (1<<11);
	static int RESEARCH_SNIFFER =   (1<<12);

	static int INFO_RESEARCH_AVAILABLE = 0;
	static int INFO_RESEARCH_DONE = 1;
	static int INFO_BUILDINGS_AVAILABLE = 2;

	static int[] ALL_BOTS;

	public void Const() {
		if (staticInit) {
			int []a = {
			WheeledGrabber,
			TrackedGrabber,
			WingedGrabber,
			LeggedGrabber,
			WheeledShooter,
			TrackedShooter,
			WingedShooter,
			LeggedShooter,
			WheeledOrgaShooter,
			TrackedOrgaShooter,
			WingedOrgaShooter,
			LeggedOrgaShooter,
			WheeledSniffer,
			TrackedSniffer,
			WingedSniffer,
			LeggedSniffer,
			Thumper,
			PhazerShooter,
			Recycler,
			Shielder,
			Subber
			};
			ALL_BOTS = a;
			staticInit = false;
		}
	}
}

string BotSubStr(int cat){
	 switch (cat%10) {
		case 0: return "Wheeled";
		case 1: return "Tracked";
		case 2: return "Winged";
		case 3: return "Legged";
	}
}

string ColorStr(int cat){
	 switch (cat%10) {
		case 0: return "Blue";
		case 1: return "Red";
		case 2: return "Green";
		case 3: return "Yellow";
		case 4: return "Violet";
	}
}

public string CatStr(int cat) {
	switch (cat) {
	case ResearchCenter: return "Research Center";
	case BotFactory: return "Bot Factory";
	}
	switch (cat/10) {
	case 11: return BotSubStr(cat) + " Grabber";
	case 12: return BotSubStr(cat) + " Sniffer ";
	case 13: return BotSubStr(cat) + " Shooter";
	case 14: return BotSubStr(cat) + " OrgaShooter";
	case 26: return ColorStr(cat) + " Flag";
	default: return "Cat " + cat;
	}
}

public string researchString(int research) {
	if (research == ResearchTracked) return "Tracked Bots";
	if (research == ResearchWinged) return "Winged Bots";

	message("Unrecognized research type!", DisplayError);
	return "Unrecognized research type!";
}

//returns the research needed for the bot's propultion
int botPropResearch(int botType){
	switch (botType % 10) {
	case 0: return 0;  //Wheeled needs no research
	case 1: return ResearchTracked;
	case 2: return ResearchWinged;
	case 3: return ResearchLegged;
	}
}

public int[] botResearch(int botType) {
	int[] research = { botPropResearch(botType) };

	switch (botType/10) {
	case 11: break;
	case 12: research[1] = ResearchSniffer; break;
	case 13: research[1] = ResearchShooter; break;
	case 14: research[1] = ResearchOrgaShooter; break;
	default:
		message("Invalid bot type: " + botType, DisplayError);
	}

	return research;
}

// When converting to a string, a raw constant (ResearchTracked, etc) will
// become the string text.  If we want it to be the number, we can pass if
// through this function first.
public int integer(int constant) {
	return constant;
}

public string printFlags(int flags) {
	string s = "|";
	for (int i = 12; i >= 0; i--) {
		if ((flags & (1<<i)) != 0) {
			s += "1|";
		} else {
			s += "0|";
		}
	}
	return s;
}
