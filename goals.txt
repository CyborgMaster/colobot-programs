extern void object::Goals() {}

//gathers a type of resource to location
void object::collect(float[] params) {
	float resource = params[0];
	point dropOff = new point(params[1], params[2]);
	bool shouldWait = (params[3] != 0);

	Bot me(this);
	bot.hoverHeight = 5;

	while(bot.get(resource, dropOff, 30, shouldWait)) {
		bot.deposit(dropOff);
	}

	message("No more!");
}

// Loads a certain number of a resource onto the ship
public class LoadGoal extends Goal {
	int resource;
	int count;

	LoadGoal(int _resource, int _count) {
		super.Goal(WheeledGrabber);
		resource = _resource;
		count = _count;
	}

	void checkRequirements() {
		//check for adequate power
		SlaveInfo actor = command.getFreeSlave(botType);
		if (actor != null) {
			o = radar(strval(params[0]));
			if (actor.bot.energyCell.energyLevel * const.FLYING_RANGE <
					distance2d(actor.bot.position, o.position)) {
				ensureBuilding(PowerStation);
			}
		}
	}

	void perform(Bot bot) {
		bot.hoverHeight = 5;

		object ship = radar(SpaceShip);

		for (int i = 0; i < count; i++ ) {
			bot.get(resource, ship.position, 30, false);

			//find a good spot on the ship
			point p = findShipSpot();
			bot.bot_goto(p, 1);
			drop();
		}
	}
}

// Boards the ship for takeoff
public class BoardGoal extends Goal {
	public BoardGoal(int botType) {
		super.BoardGoal(botType);
	}

	void perform(Bot bot) {
		bot.hoverHeight = 5;

		object ship = radar(SpaceShip);
		point p = findShipSpot();
		bot.bot_goto(p, 1);
	}
}

public class BuildBuildingGoal extends Goal {
	int buildingType;

	BuildBuildingGoal(_buildingType) {
		super.Goal(WheeledGrabber);
		buildingType = _buildingType;
	}

	void checkRequirements() {
		//TODO: check if the building type is available
		//TODO: check we have the titanium
	}

	void perform(Bot bot) {
		bot.get(Titanium, bot.me.position, 0, false);

		object o = radar(SpaceShip);
		point p1;
		if (o != null) {
			p1 = findBuildingSpot(o.position, 30);
		} else {
			p1 = findBuildingSpot(bot.me.position, 0);
		}

		bot.bot_goto(p1, 1);
		drop();

		float a;
		if (o != null) {
			a = normalize(angle(o.position, p1) + 180);
		} else {
			a = normalize(bot.me.orientation + 180);
		}

		point p2 = alongDirection(p1, a, 8);
		bot.bot_goto(p2, 1);
		turn(direction(p1));
		message("Building building '" + CatStr(buildingType) + "'", DisplayInfo);
		build(buildingType);

		do {
			o = radar(buildingType, 0, 360, 0, 16);
		} while (o == null);
	}
}

public class BuildBotGoal extends Goal {
	int botType;

	BuildBotGoal(int _botType) {
		super.Goal(WheeledGrabber);
		botType = _botType;
	}

	void checkRequirements() {
		ensureResearch(botResearch(strval(params[0])));
		ensureBuilding(BotFactory);
		// TODO: check for have titanium and power cell
	}

	void perform(Bot bot) {
		bot.get(Titanium, bot.me.position, 0, false);

		object o = radar(BotFactory);
		if (o == null) {
			message("No Robot Factory", DisplayError);
			return;
		}

		bot.bot_goto(o.position, 1);
		drop();
		move(-5);

		message("Building '" + CatStr(botType) + "'", DisplayInfo);
		o.factory(botType);

		point p = bot.me.position;
		bot.get(PowerCell, bot.me.position, 0, false);
		bot.bot_goto(p, 1);

		do {
			o = radar(type, 0, 360, 0, 10);
		} while (o == null);

		bot.bot_goto(o.position, 1);
		drop();

		move(-5);
		turn(90);
		move(5);

		//load slave program
		o.loadProgram(1, "savegame/Jeremy/program/slave.txt");
		o.runProgram(1);
	}
}

public class ResearchGoal extends Goal {
	int researchType;

	ResearchGoal(int _researchType) {
		super.Goal(WheeledGrabber);
		researchType = researchType;
	}

	void checkRequirements() {
		ensureBuilding(ResearchCenter);
		// TODO: ensure power cell
	}

	void performResearch(Bot bot) {
		object o = radar(ResearchCenter);
		if (o == null) {
			message("No Research Center", DisplayError);
			return;
		}

		if (o.energyCell == null || o.energyCell.energyLevel < 1) {
			message("Powering Research Center", DisplayInfo);
			bot.get(PowerCell, bot.me.position, 0, false);
			bot.bot_goto(o.position, 1);
			motor(1,1);
			wait(0.5);
			motor(0,0);
			drop();
		}

		message("Researching '" + researchString(type) + "'", DisplayInfo);
		o.research(type);

		while (o.energyCell.energyLevel > 0.01) {
			wait(1);
		}
	}
}

point findShipSpot() {
	object o = radar(SpaceShip);
	return findSpot(new ShipSpotChecker(), o.position, 0, 1);
}

public class ShipSpotChecker extends SpotChecker {
	public bool check(point p) {
		object o = search(Any, p);
		return (distance2d(p, o.position) > 3);
	}
}

point findBuildingSpot(point origin, float minDist) {
	return findSpot(new BuildingSpotChecker(), origin, minDist, 3);
}

public class BuildingSpotChecker extends SpotChecker {
	public bool check(point p) {
		if (topo(p) < 0) return false;
		object o = search(Any, p);
		if (distance2d(p, o.position) < 10) return false;
		if (flatground(p, 5) < 4.9) return false;
		return true;
	}
}
