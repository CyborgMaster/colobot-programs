/* Ideas
 * Don't circle targets if we are really close to them
 * better verticle aim on kill
 * check recharge level based on distance to power station
 * when repairing fly higher to avoid damage
 */

extern public void Utilities() {}

public bool object::isAlive() {
	return search(category, position) == this;
}

public class SpotChecker {
	public bool check(point p) {
		message("check not implemented", DisplayError);
		throw 1;
	}
}

public point findSpot(SpotChecker checker, point origin, float minDist, float stride) {
	point p = origin;
	int start = minDist / stride;

	for (int side = start; side < 50; side++) {
		p.y = origin.y - stride * side;
		for (p.x = origin.x - stride * side; p.x < origin.x + 0.1 + stride * side; p.x += stride) {
			if (checker.check(p)) return p;
		}

		p.x = origin.x + stride * side;
		for (p.y = origin.y - stride * side; p.y < origin.y + 0.1 + stride * side; p.y += stride) {
			if (checker.check(p)) return p;
		}

		p.y = origin.y + stride * side;
		for (p.x = origin.x + stride * side; p.x > origin.x - 0.1 - stride * side; p.x -= stride) {
			if (checker.check(p)) return p;
		}

		p.x = origin.x - stride * side;
		for (p.y = origin.y + stride * side; p.y > origin.y - 0.1 - stride * side; p.y -= stride) {
			if (checker.check(p)) return p;
		}
	}
}

public point nearestSafeSpot(point origin, float minDist) {
	// FIX: put this back to inline construction when melex fixes his code
	SpotChecker c = new SafeSpotChecker(minDist);
	return findSpot(c, origin, 0, 10);
}

public class SafeSpotChecker extends SpotChecker {
	static Const const = new Const();
	float minDistToEnemy;

	void SafeSpotChecker(float _minDistToEnemy) {
		minDistToEnemy = _minDistToEnemy;
	}

	public bool check(point p) {
		if (topo(p) < 0.5) return false;
		if (flatground(p, 2) < 1) return false;
		object o = search(const.ALL_ALIENS, p);
		if (o != null && distance2d(p, o.position) < minDistToEnemy) return false;
		return true;
	}
}

public point findShipSpot() {
	object o = radar(SpaceShip);

	// FIX: put this back to inline construction when melex fixes his code
	SpotChecker c = new ShipSpotChecker();
	return findSpot(c, o.position, 0, 1);
}

public class ShipSpotChecker extends SpotChecker {
	public bool check(point p) {
		object o = search(Any, p);
		return (distance2d(p, o.position) > 3);
	}
}

public float angle(point pointA, point pointB)
{
	if (pointB.x - pointA.x == 0) {
		if (pointB.y - pointA.y > 0) {
			return 90;
		} else {
			return 270;
		}
	}

	float offset = 0;
	if ((pointB.x - pointA.x) < 0) {
		offset = 180;
	}
	return offset + atan((pointB.y - pointA.y) / (pointB.x - pointA.x));
}

public float normalize(float a) {
	while (a < 0) a += 360;
	while (a > 360) a -= 360;
	return a;
}

public point alongDirection(point origin, float angle, float dis) {
	point p;
	p.x = origin.x + cos(angle) * dis;
	p.y = origin.y + sin(angle) * dis;
	return p;
}
