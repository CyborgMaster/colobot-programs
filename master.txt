extern void object::Master() {}

public class Goal {
	// TODO: instead of marking done, have an isCompleted method that dynamically
	// detects completion, that way we can deal with things like bots/buildings
	// getting destroyed.
	static int NONE = 0;
	static int IN_PROGRESS = 1;
	static int DONE = 2;

	static Const const = new Const();
	CommandCenter command = new CommandCenter();

	int actorBotType = WheeledGrabber;
	int status = 0; //NONE

	bool perform(Bot bot) {
		message("perform not implemented!", DisplayError);
		throw 1;
	}

	Goal getSubGoal() {
		message("getSubGoal not implemented!", DisplayError);
		throw 1;
	}

	//make sure we have the bot required for the task
	Goal ensureBot() {
		if (command.hasSlave(actorBotType)) return null;
		return new BuildBotGoal(actorBotType);
	}

	Goal nextGoal(int bot) {
		if (status != NONE) return null;
		Goal g = ensureBot();
		if (g != null) return g.nextGoal(bot);
		g = getSubGoal();
		if (g != null) return g.nextGoal(bot);
		if (actorBotType == bot) return this;
		return null;
	}

	Goal ensureBuilding(int buildingType) {
		if (radar(buildingType) != null) return null;
		return new BuildBuildingGoal(buildingType);
	}

	Goal ensureResearch(int[] research) {
		for (int i = 0; i < sizeof(research); i++) {
			if (!researched(research[i])) {
				// TODO: make sure research is available
				return new ResearchGoal(research[i]);
			}
		}
		return null;
	}
}

public class SlaveInfo {
	static int FREE = 0;
	static int BUSY = 1;

	object bot;
	int status;
	Goal goal;

	void SlaveInfo(object slaveBot) {
		bot = slaveBot;
		status = FREE;
		goal = null;
	}
}

public class CommandCenter {
	static Const const = new Const();
	static SlaveInfo slaves[] = {};
	static Goal[] goals = {};
	static bool completed = false;
	static bool staticInit = true;

	synchronized void addGoal(Goal goal) {
		goals[sizeof(goals)] = goal;
	}

	synchronized void resetGoals() {
		Goal[] empty = {};
		goals = empty;
	}

	synchronized Goal nextGoal(int bot) {
		for (int i = 0; i < sizeof(goals); i++) {
			Goal g = goals[i].nextGoal(bot);
			if (g != null) return g;
		}
		return null;
	}

	synchronized void checkCompletion() {
		if (completed) return;
		for (int i = 0; i < sizeof(goals); i++) {
			if (goals[i].status != goals[i].DONE) return;
		}

		//mission done!!!
		message("Done! Board Spaceship!");
		completed = true;
	}
	void checkForUnregisteredSlaves(object that) {
		float minDis = 0;
		while (true) {
			object o = radar(const.ALL_BOTS, 0, 360, minDis, 1000, 1, that.team);
			if (o == null) return;
			if (o != that) {
				if (!isRegistered(o)) {
					message("Registering slave: " + o.category, DisplayInfo);
					int ret = 0;
					ret += o.loadProgram(1, "savegame/Jeremy/program/slave.txt");
					ret += o.runProgram(1);
					if (ret == 0) {
						while (!isRegistered(o)) wait(1);
					} else {
						message("Couldn't register", DisplayWarning);
					}
				}
			}

			minDis = distance(that.position, o.position) + 0.05;
		}
	}

	bool isRegistered(object slaveBot) {
		for (int i = 0; i < sizeof(slaves); i++) {
			if (slaves[i].bot == slaveBot) {
				return true;
			}
		}

		return false;
	}

	synchronized SlaveInfo registerSlave(object slaveBot) {
		//check to see if we already have this slave
		for (int i = 0; i < sizeof(slaves); i++) {
			if (slaves[i].bot == slaveBot) {
				//message("Slave tried to register twice", DisplayWarning);
				return slaves[i];
			}
		}

		//register new slave
		SlaveInfo newInfo = new SlaveInfo(slaveBot);
		slaves[sizeof(slaves)] = newInfo;
		return newInfo;
	}

	public SlaveInfo getFreeSlave(int type) {
		for (int i = 0; i < sizeof(slaves); i++) {
			if(slaves[i].status == 0 /*FREE*/ &&
				 slaves[i].bot.category == type) {
				return slaves[i];
			}
		}

		return null;
	}

	public SlaveInfo getSlave(int type) {
		for (int i = 0; i < sizeof(slaves); i++) {
			if(slaves[i].bot.category == type) return slaves[i];
		}
		return null;
	}

	bool hasSlave(int type) {
		return getSlave(type) != null;
	}

	SlaveInfo waitFreeSlave(int type) {
		SlaveInfo slave;
		while(true) {
			slave = getFreeSlave(type);
			if (slave != null) return slave;
			wait(1);
		}
	}
}

// Loads a certain number of a resource onto the ship
public class LoadGoal extends Goal {
	int resource;
	int count;

	void LoadGoal(int _resource, int _count) {
		resource = _resource;
		count = _count;
	}

	Goal getSubGoal() {
		object ship = radar(SpaceShip);
		object o = radar(resource);
		if (distance2d(ship.position, o.position) > const.DRIVING_RANGE &&
				canresearch(ResearchWinged)) {
			actorBotType = WingedGrabber;
			Goal g  = ensureBot();
			if (g != null) return g;
		}
		//check for adequate power
		SlaveInfo actor = command.getSlave(actorBotType);
		if (actor != null) {
			if (actor.bot.energyCell.energyLevel * const.FLYING_RANGE <
					distance2d(actor.bot.position, o.position)) {
				Goal g = ensureBuilding(PowerStation);
				if (g != null) return g;
			}
		}
		return null;
	}

	bool perform(Bot bot) {
		bot.hoverHeight = 5;

		object ship = radar(SpaceShip);

		for (int i = 0; i < count; i++ ) {
			bool success = bot.get(resource, ship.position, 30, false);
			if (!success) { // Not reachable by wheeled
				if (canresearch(ResearchWinged)) {
					actorBotType = WingedGrabber;
				} else {
					actorBotType = TrackedGrabber;
				}
				ensureBot();
				return false;
			}

			//find a good spot on the ship
			point p = findShipSpot();
			bot.bot_goto(p, 1);
			drop();
		}
		return true;
	}
}

// Boards the ship for takeoff
public class BoardGoal extends Goal {
	void BoardGoal(int botType) {
		this.actorBotType = botType;
	}

	Goal getSubGoal() {
		return null;
	}

	bool perform(Bot bot) {
		bot.hoverHeight = 5;

		object ship = radar(SpaceShip);
		point p = findShipSpot();
		bot.bot_goto(p, 1);
		return true;
	}
}

public class BuildBuildingGoal extends Goal {
	int buildingType;

	void BuildBuildingGoal(int _buildingType) {
		buildingType = _buildingType;
	}

	Goal getSubGoal() {
		//TODO: check if the building type is available
		//TODO: check we have the titanium
		return null;
	}

	bool perform(Bot bot) {
		bot.get(Titanium, bot.me.position, 0, false);

		object o = radar(SpaceShip);
		point p1;
		if (o != null) {
			p1 = findBuildingSpot(o.position, 30);
		} else {
			p1 = findBuildingSpot(bot.me.position, 0);
		}

		bot.bot_goto(p1, 1);
		drop();

		float a;
		if (o != null) {
			a = normalize(angle(o.position, p1) + 180);
		} else {
			a = normalize(bot.me.orientation + 180);
		}

		point p2 = alongDirection(p1, a, 8);
		bot.bot_goto(p2, 1);
		turn(direction(p1));
		message("Building building '" + CatStr(buildingType) + "'", DisplayInfo);
		build(buildingType);

		do {
			o = radar(buildingType, 0, 360, 0, 16);
		} while (o == null);

		return true;
	}
}

public class BuildBotGoal extends Goal {
	int botType;

	void BuildBotGoal(int _botType) {
		botType = _botType;
	}

	Goal getSubGoal() {
		Goal g = ensureResearch(botResearch(botType));
		if (g != null) return g;
		g = ensureBuilding(BotFactory);
		if (g != null) return g;
		// TODO: check for have titanium and power cell
		return null;
	}

	bool perform(Bot bot) {
		bot.get(Titanium, bot.me.position, 0, false);

		object o = radar(BotFactory);
		if (o == null) {
			message("No Robot Factory", DisplayError);
			return false;
		}

		bot.bot_goto(o.position, 1);
		drop();
		move(-5);

		message("Building '" + CatStr(botType) + "'", DisplayInfo);
		o.factory(botType);

		point p = bot.me.position;
		bot.get(PowerCell, bot.me.position, 0, false);
		bot.bot_goto(p, 1);

		do {
			o = radar(botType, 0, 360, 0, 10);
		} while (o == null);

		bot.bot_goto(o.position, 1);
		drop();

		move(-5);
		turn(90);
		move(5);

		//load slave program
		o.loadProgram(1, "savegame/Jeremy/program/slave.txt");
		o.runProgram(1);
		wait(0.25); // Wait for slave to register with Command Center

		return true;
	}
}

public class ResearchGoal extends Goal {
	int researchType;

	void ResearchGoal(int _researchType) {
		researchType = _researchType;
	}

	Goal getSubGoal() {
		Goal g = ensureBuilding(ResearchCenter);
		if (g != null) return g;
		// TODO: ensure power cell
		return null;
	}

	bool perform(Bot bot) {
		object o = radar(ResearchCenter);
		if (o == null) {
			message("No Research Center", DisplayError);
			return false;
		}

		if (o.energyCell == null || o.energyCell.energyLevel < 1) {
			message("Powering Research Center", DisplayInfo);
			bot.get(PowerCell, bot.me.position, 0, false);
			bot.bot_goto(o.position, 1);
			motor(1,1);
			wait(0.5);
			motor(0,0);
			drop();
		}

		message("Researching '" + researchString(researchType) + "'", DisplayInfo);
		o.research(researchType);

		while (o.energyCell.energyLevel > 0.01) {
			wait(1);
		}

		return true;
	}
}

point findShipSpot() {
	object o = radar(SpaceShip);

	// FIX: put this back to inline construction when melex fixes his code
	SpotChecker c = new ShipSpotChecker();
	return findSpot(c, o.position, 0, 1);
}

public class ShipSpotChecker extends SpotChecker {
	public bool check(point p) {
		object o = search(Any, p);
		return (distance2d(p, o.position) > 3);
	}
}

point findBuildingSpot(point origin, float minDist) {
	// FIX: put this back to inline construction when melex fixes his code
	SpotChecker c = new BuildingSpotChecker();
	return findSpot(c, origin, minDist, 3);
}

public class BuildingSpotChecker extends SpotChecker {
	public bool check(point p) {
		if (topo(p) < 0) return false;
		object o = search(Any, p);
		if (distance2d(p, o.position) < 10) return false;
		if (flatground(p, 5) < 4.9) return false;
		return true;
	}
}

public void object::slave()
{
	//register as a slave
	CommandCenter command = new CommandCenter();
	SlaveInfo info = command.registerSlave(this);

	object o = radar(BotFactory);
	if (o != null && distance(position, o.position) < 2) {
		//back out of the bot factory
		move(-7);
	}

	while (true) {
		while(info.goal == null) {
			info.goal = command.nextGoal(this.category);
			if (info.goal != null) break;
			wait(1);
			// command.checkCompletion();
		}

		message("New goal", DisplayInfo);

		//mark busy
		info.status = info.BUSY;
		info.goal.status = info.goal.IN_PROGRESS;
		bool success = info.goal.perform(new Bot(this));
		if (success) info.goal.status = info.goal.DONE;
		info.goal = null;
		//mark free
		info.status = info.FREE;
	}
}

//gathers a type of resource to location
void object::collect(float[] params) {
	float resource = params[0];
	point dropOff = new point(params[1], params[2]);
	bool shouldWait = (params[3] != 0);

	Bot bot(this);
	bot.hoverHeight = 5;

	while(bot.get(resource, dropOff, 30, shouldWait)) {
		bot.deposit(dropOff);
	}

	message("No more!");
}
