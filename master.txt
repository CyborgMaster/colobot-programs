extern void object::Master() {}

public class SlaveInfo {
	static int FREE = 0;
	static int BUSY = 1;
	
	object bot;
	int status;
	int command;
	float[] params;
	
	void SlaveInfo(object slaveBot) {
		bot = slaveBot;
		status = FREE;
		command = -1;
	}
}

public class CommandCenter {
	static SlaveInfo slaves[] = null;
	
	void checkForUnregisteredSlaves(object that) {
		int bots[];
		bots[0] = WheeledGrabber;
		bots[1] = TrackedGrabber;
		bots[2] = WingedGrabber;
		bots[3] = LeggedGrabber;
		bots[4] = WheeledShooter;
		bots[5] = TrackedShooter;
		bots[6] = WingedShooter;
		bots[7] = LeggedShooter;
		bots[8] = WheeledOrgaShooter;
		bots[9] = TrackedOrgaShooter;
		bots[10] = WingedOrgaShooter;
		bots[11] = LeggedOrgaShooter;
		bots[12] = WheeledSniffer;
		bots[13] = TrackedSniffer;
		bots[14] = WingedSniffer;
		bots[15] = LeggedSniffer;
		bots[16] = Thumper;
		bots[17] = PhazerShooter;
		bots[18] = Recycler;
		bots[19] = Shielder;
		bots[20] = Subber;
		
		float minDis = 0;
		while (true) {
			object o = radar(bots, 1, 360, minDis, 100);
			if (o == null) return;
			if (o != that) {
				if (!isRegistered(o)) {
					message("Load and run program 'Slave.txt' on " + o.category);
					while (!isRegistered(o)) wait(1);
				}
			}
			
			minDis = distance(that.position, o.position) + 0.05; 
		}
	}
	
	bool isRegistered(object slaveBot) {
		for (int i = 0; i < sizeof(slaves); i++) {
			if (slaves[i].bot == slaveBot) {
				return true;
			}
		}
		
		return false;
	}
	
	synchronized SlaveInfo registerSlave(object slaveBot) {
		//check to see if we already have this slave
		for (int i = 0; i < sizeof(slaves); i++) {
			if (slaves[i].bot == slaveBot) {
				message("Slave tried to register twice", DisplayWarning);
				return slaves[i];
			}
		}
		
		//register new slave
		SlaveInfo newInfo = new SlaveInfo(slaveBot);
		slaves[sizeof(slaves)] = newInfo;
		return newInfo;
	}
	
	SlaveInfo getFreeSlave(int type) {
		for (int i = 0; i < sizeof(slaves); i++) {
			if(slaves[i].status == 0 /*FREE*/ && slaves[i].bot.category == type) return slaves[i];
		}
		
		return null;
	}
	
	SlaveInfo waitFreeSlave(int type) {
		SlaveInfo slave;
		while(true) {
			slave = getFreeSlave(type);
			if (slave != null) return slave;
			wait(1);
		}
	}
}

public void object::buildBuilding(int type, string name) {
	object that = this;
	Bot me(that);
	me.get(Titanium, that.position, 0, false);
	
	object o = radar(SpaceShip);
	point p = space(o.position, 8, 50, 8);
	
	me.bot_goto(p, 1);
	drop();
	
	float a = normalize(angle(o.position, p) + 180);
	p = alongDirection(p, a, 8);
	me.bot_goto(p, 1);
	
	message("Build building '" + name + "' while standing here");
	
	do {
		o = radar(type, 0, 360, 0, 10);
	} while (o == null);
}

public void object::buildBot(int type, string name){
	object that = this;
	Bot me(that);
	me.get(Titanium, that.position, 0, false);
	
	object o = radar(BotFactory);
	if (o == null) {
		message("No Robot Factory", DisplayError);
		return;
	}
	
	me.bot_goto(o.position, 1);
	drop();
	move(-5);
	
	message("Build '" + name + "'");
	
	point p = position;
	me.get(PowerCell, that.position, 0, false);
	me.bot_goto(p, 1);
	
	do {
		o = radar(type, 0, 360, 0, 7); 
	} while (o == null);
	
	me.bot_goto(o.position, 1);
	drop();
	
	move(-5);
	turn(90);
	move(5);
	
	message("Load and run program 'Slave.txt' on new bot");
}

public void object::research(string name) {
	object that = this;
	Bot me(that);
	
	object o = radar(ResearchCenter);
	if (o == null) {
		message("No Research Center", DisplayError);
		return;
	}
	
	if (o.energyCell == null || o.energyCell.energyLevel < 1) {
		message("Powering Research Center", DisplayInfo);
		me.get(PowerCell, that.position, 0, false);
		me.bot_goto(o.position, 1);
		motor(1,1);
		wait(0.5);
		motor(0,0);
		drop();
	}
	
	message("Research '" + name + "'");
	
	while (o.energyCell.energyLevel > 0.01) {
		wait(1);
	}
}
